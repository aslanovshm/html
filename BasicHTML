# Basic HTML & Semantic

 1. [Базовая структура страницы](#BaseStruct)
 2. [Разделы](#Sections)
 3. [Заголовки и параграфы](#Heading)
 4. [Ссылки](#Links)
 5. [Разметка текста](#Text)
 6. [Изображения](#Images)
 7. [Списки](#Lists)
 8. [Таблицы](#Tables)
 9. [Цитаты](#Quotes)
 10. [Формы](#Forms)
 11. [Мультимедиа](#Multi)
 12. [Интерактивные элементы](#Interact)

<a name="BaseStruct"></a>
## Base Structure (Базовая структура)

### Doctype
Каждый HTML-документ начинается с декларации типа документа или «доктайпа». Тип документа необходим, чтобы браузер мог определить версию HTML и правильно отобразить страницу.

```html
<!DOCTYPE html>
```

### Тег html

Простейшая HTML-страница состоит как минимум из трёх тегов: `<html>`, `<head>` и `<body>`.

Тег `<html>` располагается в документе сразу после доктайпа и включает в себя все остальные теги, включая `<head>` и `<body>`.

#### Атрибут lang

Тегу `<html>` обычно добавляют атрибут `lang` *(сокращение от английского «language»)*, в котором задаётся язык документа.

Атрибут `lang` можно задавать любым тегам, если нужно уточнить, на каком языке написан текст внутри тега. Но если задать его тегу `<html>`, то действие атрибута распространится на весь документ целиком.

```html
<html lang="ru">
```

### Тег head

Тег `<head>` предназначен для хранения служебной информации о странице. Внутри `<head>` обычно содержится заголовок, ключевые слова, описание страницы и другие служебные данные, а также подключаются стили и другие внешние ресурсы. Содержимое этого тега не отображается на странице напрямую. В документе тег `head`может быть использован только один раз.

#### Атрибут link
`<link>` - подключает к документу `CSS` файлы. 

Атрибут `href` задаёт адрес стилевого файла, а атрибут `rel` со значением `stylesheet` говорит браузеру, что подключаются именно стили, а не что-то другое.

```html
<head>
  <link href="адрес_файла_стилей.css" rel="stylesheet">
</head>
```

Обычно стили подключаются внутри `<head>`, но это необязательно. Тег `<link>` будет работать и в другом месте страницы.

### Тег title

`<title>` - задаёт заголовок страницы, который отображается во вкладках браузера.
```html
<head>
  <title>Курсы — HTML Academy</title>
</head>
```

Текст в `<title>` должен описывать содержимое документа в целом. По заголовку должно быть понятно, о чём эта страница, даже когда она не открыта в браузере, а отображается в результатах поиска или в браузерных закладках.

### Тег meta
Сообщает браузеру, поисковому роботу или другому устройству различную метаинформацию о сайте. Например: *кодировку текста, описание контента*.

Теги `meta` не отображаются на странице напрямую, а служат для хранения информации о документе и для взаимосвязи документа с другими документами и системами.

`charset` - задаёт кодировку текста HTML-страницы.

```html
<meta charset="UTF-8">
```

`keywords` - задаёт перечень ключевых слов (самые важные слова из содержания страницы) которые перечисляются в атрибуте `content` через запятую.

```html
<meta name="keywords" content="важные, ключевые, слова">
```

`description` - задаёт краткое описание страницы. Используется поисковиками при отображении результатов поиска.

```html
<meta name="description" content="краткое описание содержимого страницы">
```

Рекомендации по правильному использованию метатегов от [Гугла](https://support.google.com/webmasters/answer/79812) и [Яндекса](https://help.yandex.ru/webmaster/recommendations/using-meta-desc.xml).

<a name="Sections"></a>
## Sections (Разделы)

### Тег header
`<header>` - описывает вводную часть страницы (шапку)

На странице может быть не один тег `<header>`. Например, `<header>` может использоваться как  вводная часть статьи, в которой могут содержаться заголовки, оглавление и так далее.

```html
<header>
  Я шапка сайта. Могу повторяться на других страницах.
</header>
```

### Тег main
`<main>` - выделяет основное содержание страницы, которое не повторяется на других страницах (уникальный контент). Обычно на странице используется один `<main>`.

Спецификация не допускает использование на одной странице более одного тега `<main>`, если у них нет специального атрибута `hidden`. Этот атрибут добавляется `HTML-элементу`, например, в одностраничных приложениях (Single Page Application), чтобы менять содержимое страницы, делая видимым тот или иной `<main>` в разных состояниях приложения. Атрибут `hidden` указывает браузеру, что элемент не должен отображаться и использоваться в момент, когда отображается и используется содержимое другого `<main>`.

```html
<main>
  Привет, я основной контент! Живу только на этой странице.
</main>
```

### Тег footer
`<footer>` - описывает заключительную часть страницы (подвал).

На странице может быть не один тег `<footer>`. Например, `<footer>` может использоваться как  заключительная часть статьи, в которой может содержаться дополнительная информация: данные об авторе, кнопки «поделиться» и так далее.
```html
<footer>
  Я подвал сайта. Могу повторяться на других страницах.
</footer>
```

### Тег section
`<section>` - обозначает крупный смысловой (или «логический») раздел.

Если разделу можно дать имя, описывающее его содержание или назначение, то данный раздел смысловой.

Смысловые разделы составляют содержание страницы, но сами по себе, в отрыве от страницы, эти «секции» теряют смысл.

```html
<section>
  Раздел «О компании» Хм, наверное в нём будет описание компании.
</section>
<section>
  Раздел «Редактирование профиля» Ага, здесь я управляю личными данными.
</section>
```

**Отличие смыслового раздела от логического**

Логический раздел можно осмысленно назвать одним словом или словосочетанием: «программа обучения», «каталог», «наши преимущества». 

Структурный раздел нельзя осмысленно назвать одним словом или словосочетанием: «новости и галерея», «фильтры и товары».

### Тег nav
`<nav>` - логический раздел для основной навигации по сайту. Обычно в `<nav>` включают ссылки на другие страницы или навигацию по текущей странице.

Не каждая группа ссылок на странице должна быть обёрнута в `<nav>`. Например, небольшой блок со вспомогательными ссылками в подвале сайта.

Блок `<nav>` помимо ссылок может включать абзацы с текстом, заголовки, списки и другое содержание.
```html
<nav>
  Первый пост, второй пост, архив постов
</nav>
```

### Тег article
`<article>` - цельный, законченный и самостоятельный фрагмент информации.

**Отличие article от section**

Тег `<article>`, в отличие от `<section>`, можно вырвать из одного места и вставить в другое (на другую страницу сайта или на другой сайт), и смысл содержимого при этом не потеряется. Пример: *статья, пост в блоге, сообщение на форуме* и так далее.

Тег `<section>` можно использовать внутри `<article>`, если там нужно выделить отдельные смысловые блоки.

Тег `<article>` можно использовать внутри `<section>`, если в логическом разделе документа содержатся независимые контентные блоки.

```html
<article>
  Я фотка в Инстаграме, смотрюсь отлично где угодно
</article>
```

### Тег aside
Тег `<aside>` логический блок который включает в себя дополнительное содержание, не связанное напрямую с основным. Пример: *сайдбар, боковая панель*.

```html
<aside>
  Я скромный блок с курсами валют на сайте про рыбок
</aside>
```

<a name="Heading"></a>
## Заголовки и параграфы

### Заголовки h1 - h6
Заголовки используются для создания основной структуры текста.

Тег `<h1>` самый важный заголовок (заголовок верхнего уровня), а тег `<h6>` подзаголовок самого нижнего уровня. Буква «h» в названии тега — это первая буква английского **heading**.

Поисковые системы придают особое значение заголовкам, также правильно расставленные заголовки важны для доступности документа.

Заголовок `<h1>` — самый важный на странице. В него включается текст, который в целом описывает содержание страницы. Очень важно, чтобы заголовок первого уровня на странице был только один.

На главных страницах заголовок верхнего уровня часто добавляют в шапку сайта. На внутренних страницах заголовок первого уровня чаще всего находится в основном контенте, то есть внутри тега `<main>`.

На странице можно использовать несколько `<section>` или `<article>` со своими `<h1>`, `<h2>` и `<h3>`.

### Тег p, параграф
`<p>` *(от английского «paragraph»)* используется для разметки параграфов. Параграфы в HTML - это неразрывная последовательность фразовых элементов. Параграфы существуют даже без тега `<p>`.

Основную структуру текста создают с помощью заголовков, а более мелкую выстраивают с помощью параграфов (или абзацев).

Тег `<p>` так же используется когда нужно отделить один блок текста от другого.
```html
<p>Абзац про то, как я решил стать верстальщиком</p>
<p>Абзац про моего инструктора</p>
<p>Абзац про мой дневничок</p>
```

### Визуальная группировка элементов

Теги `<div>` *(сокращение от «division»)* и `<span>` - используются для визуальной группировки элементов.

Тег `<div>` обычно используется для группировки крупных элементов. Например: *группировка несколько абзацев, или контейнер для создания сеток страниц*.

Тег  `<span>` используется для выделения мелких текстовых элементов. Например: *часть слов, отдельные слова или фразы, состоящие из нескольких слов*.

Тег `<p>` позволяет группировать элементы с фразовым типом содержимого. Например: *изображения, ссылки, поля ввода*.

Не все теги могут быть включены в `<p>`. Напрмер: *крупные структурные теги, заголовки, формы, списки, таблицы*. Когда браузер встречает неподходящий тег внутри `<p>`, он «выбрасывает» этот тег из `<p>`.

<a name="Links"></a>
## Ссылки
Тег `<a>` *(сокращение от «anchor»)* - предназначен для создания ссылок, а атрибут `href` *(сокращение от «hyper reference»)* - задаёт адрес ссылки в формате `URL`.
```html
<a href="https://htmlacademy.ru">HTML Academy</a>
```

### Ссылка-заглушка
Тег `<a>` без атрибута `href`. Используется когда нужно показать что пользователь находится на текущей странице. Ссылки - заглушки лучше использовать совместно с атрибутом `title` который добавляет подсказку к ссылке.
```html
<ul>
  <li><a title="Вы находитесь на текущей странице.">1 страница</a></li>
  <li><a href="2">2 страница</a></li>
  <li><a href="3">3 страница</a></li>
</ul>
```

### Абсолютные и относительные ссылки
Абсолютные ссылки (обычный адрес) -  это ссылки на другие страницы в интернете. Абсолютные адреса содержат минимум три части: **протокол, имя сервера и путь**.
```html
https://site.ru/blog/index.html
```
Относительные ссылки - это ссылки на внутренние страницы сайта.
```html
index.html
```

### Ссылка на файл
Атрибут `download` предотвращает открытие файлов прямо в браузере, и скачивает файл.
```html
<a href="file.pdf" download>Браузер скачает меня, а не будет читать</a>
```

### Ссылка-якорь
Ссылка-якорь — это обычная ссылка, в адресе которой используется символ `#`, после которого следует идентификатор элемента. Идентификатор создаётся с помощью атрибута `id` у того тега, к которому надо перейти при щелчке по ссылке.
```html
<a href="#part1">Глава 1</a>
```
При щелчке по такой ссылке браузер найдёт на странице элемент с соответствующим атрибутом id и прокрутит окно страницы к нему.
```html
<section id="part1">Содержание первой главы</section>
```
Ссылка-якорь используется для прокрутки к заданной части страницы, в том числе и в абсолютных адресах.

<a name="Text"></a>
## Разметка фрагментов текста

### Абревиатура
Тег `<abbr>` определяет аббревиатуру. Визуально отображается пунктирным подчёркиванием. Атрибут `title` включает в себя полное описание аббревиатуры. Каждый элемент `<abbr>` независим от другого, даже если они имеют одинаковое содержание.
```html
<p><abbr title="HyperText Markup Language">HTML</abbr> - язык гипертекстовой разметки документов.</p>
```

### Адрес
Тег `<address>` представляет собой контактную информацию лица (лиц) или организации. Может включать в себя физическое и/или гео местоположение лица или организации, а также информацию об идентификации лица (лиц) или организации.
```html
<address>
  UNIVERSITY INTERSCHOLASTIC LEAGUE<br>
  1701 Manor Road, Austin, TX 78722<br>
  Tel: (512) 471-5883 | Fax: (512) 471-5908
</address>
```

### Акцентрируемые слова
Теги `<em>` *(сокращение от «emphasis»)* и `<i>` *(сокращение от «italic»)* - предназначены для акцентирования внимания на слове или фразе. Оба тега визуально выделяются *курсивом*.

Тег `<em>` определяет текст, на который сделан особый акцент, меняющий смысл предложения.
```html
Я <em>просто обожаю</em> холодные зимние дни!
```
Тег `<i>` применяется для обозначения текста, который отличается от окружающего текста, но не является более важным. Например: *названия, термины, иностранные слова*. Также в этот тег можно обернуть мысли героя. В речи такой текст обычно выделяется интонационно.
```html
Он взглянул в окно и подумал — <i>такого просто не может быть</i>!
```

### Важные слова
Теги `<strong>` и `<b>` *(сокращение от «bold»)* - предназначены для выделения важных слов или фраз. Оба тега визуально выделяются **жирным**.

Тег `<strong>` указывает на важность отмеченного текста. Он может использоваться для выделения предупреждений или части документа, которую пользователь должен увидеть раньше остального. Обозначение части текста тегом `<strong>` не должно изменять смысла предложения.
```html
<strong>Внимание!</strong> Это место опасно. <strong>Вы можете упасть в пропасть</strong>, если подойдёте близко к краю.
```
Тег `<b>` предназначен для выделения текста с целью привлечения к нему внимания, но без придания ему особой важности. Использовать его нужно только в случае, когда остальные теги выделения не подходят. Например: *выделение вводного предложения статьи*.
```html
Вы входите в небольшую комнату. Ваш <b>меч</b> загорается ярче. <b>Крыса</b> стремительно пробегает вдоль стены.
```

### Верхние и нижние индексы
Тег `<sup>` *(сокращение от «superscript»)* отображает текст в виде верхнего индекса, а тег `<sub>` *(сокращение от «subscript»)* в виде нижнего индекса. Используются для указания единиц измерения или написания простых формул.
```html
20м<sup>2</sup>
H<sub>2</sub>O
```
Теги можно использовать внутри друг друга для создания сложных формул. Для создания очень сложных формул лучше воспользоваться специальным языком разметки `MathML`.

### Выделение текста
Тег `<mark>` помечает текст как выделенный. Визуально фоновый цвет текста внутри `<mark>` выделяется желтым цветом.
```html
<mark>текст</mark>
```

### Дата и время
Тег `<time>` - описывает даты одновременно и для человека, и для машины. Дата для человека описывается внутри тега, а дата для машины — внутри атрибута `datetime` в формате ISO 8601.
```html
<time datetime="2016-11-18T09:54">09:54 утра</time>
<time datetime="2015-11-18">18 ноября 2015</time>
<time datetime="2018-09-23">в прошлую субботу</time>
<time datetime="2017-04-20">вчера</time>
```

### Комбинация клавиш
Тег `<kbd>` применяется для описания пользовательского ввода *(ввод с клавиатуры, выбор пунктов в меню, голосовые команды)*.
```html
<p>Чтобы сохранить файл, нажмите на клавиатуре <kbd>Ctrl</kbd> + <kbd>S</kbd>, или в контекстном меню выберите: <kbd>Файл | Сохранить</kbd></p>
```

### Описание изменений
Теги `<del>` *(сокращение от «delete»)* и `<ins>` *(сокращение от «insert»)* - предназначены для описания изменений в документе.

Тег `<del>` выделяет текст, который был удалён в новой версии документа. В браузере этот текст перечёркивается.

Тег `<ins>` выделяет текст, который был добавлен в новой версии документа. В браузере этот текст подчёркивается.

Оба тега имеют атрибут `datetime`, в котором можно указать дату и время, когда была внесена та или иная правка.
```html
<ul>
  <li>Почистить посудомоечную машину</li>
  <li><del datetime="2009-10-11T01:25-07:00">Погулять</del></li>
  <li><del datetime="2009-10-10T23:38-07:00">Поспать</del></li>
  <li><ins>Купить принтер</ins></li>
</ul>
```

### Переменная
Тег `<var>` представляет собой переменную. Это может быть фактическая переменная в математическом выражении или контексте программирования, идентификатор, константа, символ, идентифицирующий физическую величину, параметр функции, и т.д. Зачастую используется с языком математической разметки `MathML`.
```html
Из пункта <var>A</var> в пункт <var>B</var> нужно пройти <var>N</var> шагов. 
```

### Перенос строки
Тег `<br>` *(сокращение от «line break»)* - добавляет перенос строки внутри абзаца. Используется если переносы нужны в тексте для повышения его читабельности. Например, *в почтовых адресах, стихах, текстах песен, режиме работы*.

### Результат компьютерной программы
Тег `<samp>` определяет текст как результат вывода компьютерной программы.
```html
<p>В ходе обработки запроса были получены следующие результаты:<br>
  <samp>Обработано объектов: 10582,</samp><br>
  <samp>Найдено подходящих объектов: 28.</samp>
</p>
```
```html
<p>Компьютер выдал ошибку: <samp>Ошибка в системе, недостаточно памяти.</samp></p>
```
```html
<p>Последнее посещение: <samp>Tue Apr 12 09:10:17 2005 from mowmow.example.com</samp></p>
```

### Символы-мнемоники
Мнемоники — это особые строки, которые начинаются с амперсанда `&` и заканчиваются точкой с запятой `;`.

Некоторые символы в `HTML` зарезервированы, то есть браузер считает их `HTML-кодом`. Например, любой текст после знака меньше `<` браузер будет пытаться интерпретировать как тег и на странице не отобразит. Используя мнемоники, знак меньше на страницу можно вставить мнемоникой `&lt;` *(less than)*, а знак больше `&gt`; *(greater than)*.

[Список всех мнемоник](https://dev.w3.org/html5/html-author/charref)

### Термины
Тег `<dfn>` применяется для выделения терминов при их первом появлении в тексте. При использовании этого термина в дальнейшем, он считается уже известным читателю. Визуально отображается курсивом.
```html
<dfn>World Wide Web</dfn> является частью Интернета, которая использует протокол HTTP.
```
Тег `<dfn>` можно использовать в связке с `<abbr>`.
```html
<dfn><abbr title="World Wide Web">WWW</abbr></dfn> является частью Интернета, которая использует протокол HTTP.
```
На тег `<dfn>` можно ссылаться по его `id` посредством ссылки - якоря.
```html
<p><dfn id="www">World Wide Web</dfn> (<abbr title="World Wide Web">WWW</abbr>)  распределённая система, предоставляющая доступ к связанным между собой документам, расположенным на различных компьютерах, подключённых к сети Интернет.</p>
...
<p>Рекомендации консорциума <a href="#www"><abbr title="World Wide Web">WWW</abbr></a> открыты, то есть не защищены патентами и могут внедряться любым человеком без всяких финансовых отчислений консорциуму.</p>
```

### Форматирование
Тег `<pre>` *(сокращение от «preformatted text»)* - предварительно отформатированный текст. Используется для того чтобы сохранить форматирование. Например: *пример кода, картинка ASCII Art*. Браузер сохраняет и отображает все пробелы и переносы, которые есть внутри тега `<pre>`.
```html
<pre>Пример
        преформатированного
        текста     с сохранёнными пробелами
                     и переносами строк</pre>
```

### Фрагмент кода
Тег `<code>` - фрагмент кода. Используется для разметки фрагмента кода. Например: *код программы, название файла и т.д*. Тег `<code>` можно вкладывать внутрь тега `<pre>`, а наоборот нельзя.
```html
Тег <code>code</code> — используется для обозначения фрагмента кода.
```

<a name="Images"></a>
## Изображения
Тег `<img>` - подключает изображение. Атрибут `src` указывает путь до изображения.

Атрибут `width` - указывает ширину изображения, а атрибут `height` - указывает высоту изображения. Если задать только один из размеров, ширину или высоту, то вторую размерность браузер вычислит самостоятельно исходя из пропорций изображения. Если задать картинке одновременно и высоту, и ширину, то браузер может нарушить пропорции исходного изображения.
указывает.

Атрибут `alt` - альтернативный текст. Используется для описания изображения. Показывается в случае если изображение не загрузилось.

```html
<img src="logo.png" width="200" height="100" alt="Логотип">
```

### Форматы изображений

**SVG (Scalable Vector Graphics)** - масштабируемая векторная графика. Качество таких изображений не меняется при изменении размеров, и вес у них небольшой. Подходит для *малоцветных схем, логотипов и иконок*.

Используется если:
- необходимо масштабировать изображение без потерь;
- изменять цвет элементов изображения;
- нужно анимировать части изображения.

**JPEG** - формат для сжатия и хранения полноцветных фотографий. Поддерживает более 16 миллионов цветов. JPEG сжимает изображения с потерей качества. Поэтому при уменьшении веса изображения, ухудшается её качество. Главная задача при работе с JPEG — подобрать такой уровень сжатия, чтобы и вес, и качество картинки были приемлемыми.

Используется для:
- полноцветных изображений, фотографий;
- изображений с плавным переходом яркости и контраста;
- рисунков с большим количеством разноцветных деталей.

**PNG** - формат сжатия без потерь. Подходит: *скриншоты сайтов, чертежи и печатный текст*. PNG поддерживает прозрачность, то есть каждому пикселю в отдельности можно задать свою степень прозрачности.

Используется для:
- изображений с прозрачностью и полупрозрачностью;
- когда необходима повышенная точность полноцветных изображений;
- изображений с резкими переходами цветов.

### Демонстративный материал
Тег `<figure>` подходит для любого иллюстративного или демонстрационного материала, которым можно дополнить содержание документа: *схемы, графики, галереи и так далее*. При удалении такого материала основное содержание не должно пострадать, иначе это не дополнительный материал и тег `<figure>` не подходит для его разметки.

Обычно каждый такой материал сопровождает разъясняющий комментарий или «легенда». Для разметки этого комментария тег `<figcaption>`, который размещается первым или последним элементом внутри `<figure>`.
```html
<figure>
  Схема, график, диаграмма или код
  <figcaption>Подпись к содержимому</figcaption>
</figure>
```

<a name="Lists"></a>
## Lists (Списки)
Тег `<ul>` *(сокращение от «unordered list»)* - неупорядоченный список. Используется, когда порядок элементов не важен. Например: *перечнь ссылок в меню, преимущества товара, ингредиенты в составе продукта*.

### Маркированный список.
В теге `<ul>` могут находиться **только** теги `<li>` *(сокращение от «list item»)*, которые обозначают элементы или пункты списка:
```html
<ul>
  <li>Я пункт списка, могу быть где захочу</li>
  <li>И я пункт списка, и мне тоже всё равно где находится</li>
</ul>
```

### Нумерованный список.
Тег `<ol>` *(сокращение от «ordered list»)* - упорядоченный список. Используется, когда порядок элементов важен. Например: *алгоритмы, инструкции, рецепты, результаты соревнований и так далее*.
```html
<ol>
  <li>Я первый пункт списка, и должен быть только здесь!</li>
  <li>А я второй пункт списка, и всегда им буду.</li>
</ol>
```

#### Атрибуты
`start` - меняет стартовое число нумерации пунктов. Может быть отрицательным.

`reversed` - меняет направление нумерации на противоположный. Этот атрибут не требует значения.

`type` - меняет тип маркера:
- `1` - десятичное число;
- `a` - буквы латинского алфавита в нижнем регистре;
- `A` - буквы латинского алфавита в верхнем регистре;
- `i` - римские цифры в нижнем регистре;
- `I` - римские цифры в верхнем регистре.

#### Вложенные списки
Теги `<ol>` и `<ul>` можно вкладывать как сами в себя, так и друг в друга и создавать многоуровневые списки. Количество уровней в списках не ограничено.
```html
<ol>
  <li>1
    <ul>
      <li>1.1</li>
      <li>1.2</li>
    </ul>
  </li>
  <li>2</li>
</ol>
```

### Список описаний
Тег `<dl>` *(сокращение от «description list»)* - список описаний. Используется для пар *ключ - значение*. Например: *вопросы-ответы, наименования и определения, категории и темы*. Создаётся с помощью трёх тегов:
- `<dl>` - список описаний;
- `<dt>` *(сокращение от «description term»)* - термин;
- `<dd>` *(сокращение от «description definition»)* - описание или определение.

Каждый список `<dl>` может содержать один или несколько терминов и одно или несколько описаний для каждого термина.
```html
<dl>
  <dt>HTML</dt>
  <dd>Язык гипертекстовой разметки</dd>
  
  <dt>CSS</dt>
  <dd>Каскадные таблицы стилей</dd>
  <dd>Язык для оформления HTML-документов</dd>
</dl>
```

<a name="Tables"></a>
## Таблицы
Простейшая таблица описывается с помощью трёх тегов:

`<table>` - обозначает таблицу.

`<tr>` *(сокращение от «table row»)* - обозначает строку таблицы.

`<td>` *(сокращение от «table data»)* - обозначает ячейку внутри строки таблицы.

`<th>` *(сокращение от «table header»)* - обозначает ячейку-заголовок. По умолчанию текст внутри <th> выделяется жирным и выравнивается по центру ячейки.

Теги `<td>` располагаются внутри тегов `<tr>`, а те, в свою очередь, внутри `<table>`. Почти всё текстовое содержимое таблицы размещается внутри тегов `<td>`. В простейшей таблице в каждой строке должно быть одинаковое количество ячеек, то есть внутри всех `<tr>` должно быть одинаковое количество `<td>`.

`<thead>` предназначен для хранения одной или нескольких строк, которые представлены вверху таблицы. Допустимо использовать не более одного элемента `<thead>`.

`<tfoot>` предназначен для хранения одной или нескольких строк, которые представлены внизу таблицы.

`<tbody>` предназначен для хранения основного содержания таблицы.

Тег `<caption>` должен размещаться **первым** внутри тега `<table>`, т.е до остальных вложенных тегов.
```html
<table>
  <caption>Текст</caption>
  <thead>
    <tr>
      <th>№<th>
      <th>Имя<th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th>№<th>
      <th>Имя<th>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>1</td>
      <td>Джон</td>
    </tr>
  <tbody>
</table>
```

### Объединение ячеек
Атрибут `colspan` - объединяет ячейки по горизонтали, `rowspan` - объединяет ячейки по вертикали. Атрибуты можно использовать как вместе, так и по отдельности.

<a name="Quotes"></a>
## Quotes (Цитаты)
Тег `<q>` *(сокращение от «quote»)*. Предназначен для выделения цитат внутри предложения. Текст внутри тега браузер автоматически обрамляет кавычками, поэтому добавлять кавычки вручную не нужно.

Атрибут `cite` позволяет указать интернет-адрес цитаты.

```html
В спецификации говорится: <q cite="https://www.w3.org/TR/html52/">The q element represents some phrasing content quoted from another source</q>.
```

Тег `<cite>` — «расширенная версия» атрибута `cite`. Помимо адреса источника цитаты можно указать и название произведения, откуда цитируется текст, а также имя автора или организации, чей текст цитируется. Содержимое `<cite>` в браузере выделяется *курсивом*.

Когда теги `<q>` и `<cite>` используют вместе, их ставят рядом друг с другом:
```html
<p>По словам <cite>Чарльза Буковски</cite> — <q>Интеллектуал о простой вещи говорит сложно — художник сложную вещь описывает простыми словами.</q></p>
```
Тег `<cite>` может быть самостоятельным и не привязываться к цитате:
```html
<p>Какой доктор ваш любимый (в сериале <cite>Доктор Кто</cite>)?</p>
```

Тег `<blockquote>` - предназначен для выделения длинных цитат, которые могут состоять из нескольких абзацев. Тег выделяет цитату не как фрагмент текста в предложении, а как отдельный блок текста с отступами. 
```html
<blockquote>
  <p>Ум ценится дорого, когда дешевеет сила.</p>
  <cite>Джейсон Стэтхэм</cite>
</blockquote>
```
У `<blockquote>` может быть атрибут `cite`, содержащий ссылку на интернет - источник цитаты.


<a name="Forms"></a>
## Формы
Формы нужны для того, чтобы отправлять данные с веб-страницы на веб-сервер, который сможет эти данные обработать: зарегистрировать пользователя, создать сообщение на форуме, отправить письмо и так далее.

Тег `<form>` - родительский элемент формы внутри которого размещаются элементы относящиеся к форме.

Атрибут `action` задаёт адрес, URL, отправки формы;

Атрибут `method` задаёт метод отправки формы. Если не указать атрибут `method`, то будет использован `get`. Всего может быть два значения `get` и `post`.

Метод `get` посылает данные формы в строке запроса, то есть они видны в адресной строке браузера и следуют после знака вопроса. Пример: *поисковые формы*.

Метод `post` посылает данные в теле HTTP-запроса и используется, когда нужно отправить много данных и ссылка на результат обработки этих данных не нужна. Пример: *редактирование личного профиля*.
```html
<form action="https://echo.htmlacademy.ru" method="get">
  поля формы
</form>
```

### Текстовое поле ввода
Тег `<input>`

Атрибут `type` задаёт тип поля. Тип поля влияет на то, как оно будет отображаться и вести себя. По умолчанию используется тип `text`.

Атрибут `name` задаёт имя поля. Используется чтобы правильно обработать данные на сервере. Обычно, имя поля должно быть уникальным в пределах формы, но есть исключения. Для задания имени поля используют латинские буквы и цифры.
```html
<form action="https://echo.htmlacademy.ru" method="get">
  <input type="text" name="search">
</form>
```

### Идентификатор и значение по умолчанию
Атрибут `id` поля ввода обозначает идентификатор. Он должен быть уникальным на всей странице. Идентификаторы в основном используются JavaScript для работы с полями. Идентификатор не передаётся на сервер. Имя поля, и идентификатора должны различаться.

Атрибут `value` задаёт значение поля ввода по умолчанию.
```html
<form action="https://echo.htmlacademy.ru" method="get">
  <input id="form-search" type="text" name="search" value="Поиск">
</form>
```

### Подпись для поля ввода
Тег `<label>` связывает текст и поле ввода логически.
```html
<label>Поиск <input type="text" name="search"></label>
```
Атрибут `for` - используется для привязки подписи к полю формы через `id`.
```html
<label for="user-field-id">Имя пользователя</label>
<input id="user-field-id" type="text" name="username">
```

### Кнопка для отправки формы
Кнопка создаётся с помощью тега `<input>` c типом `submit`.
```html
<input type="submit" value="Календарь"> 
```
Надпись на кнопке задается с помощью атрибута `value`. Для кнопки отправки формы задавать имя необязательно. Но если имя задано, то на сервер будут отправляться имя и значение кнопки. Обычно имя для кнопки отправки задают, когда в форме несколько кнопок, отвечающих за разные действия. Браузер отправляет на сервер имя и значение только той из них, на которую нажал пользователь.

### Кнопка
Тег `<button>` расширяет возможности создания кнопок. Внутри тега `<button>` можно размещать любые HTML-элементы, в том числе изображения.
```html
<button>Календарь <img src="calend.png" alt=""></button>
```
Атрибут `type` тега `<button>` имеет три значения: `submit`, `reset`, или `button`. В первом случае, кнопка будет отправлять данные на сервер, во втором, сбрасывать введенные значения. В третьем случае кнопка лишится всякой изначальной функциональности. То есть кнопка просто будет выглядеть как кнопка, но ничего по умолчанию не делать. Это удобно, если нужно добавить кнопке дополнительное действие с помощью JavaScript.

**По умолчанию значение атрибута** `type="submit"`.

### Многострочное поле
Тег `<textarea>` - создаёт многострочное текстовое поле. Атрибут `rows` принимает целочисленное значение и задаёт высоту многострочного поля в строках. Атрибут `cols` задаёт ширину поля в символах. В качестве ширины символа берётся некоторая «усреднённая ширина». 

Атрибут `value` отсутствует, поэтому текст по умолчанию задаётся между открывающим и закрывающим тегом `<textarea>`.
```html
<textarea cols="3" rows="4">Значение по умолчанию</textarea>
```

### Чекбокс или «галочка»
Чексбокс создаётся с помощью тега `<input>` с типом `checkbox`. Если в одной форме есть несколько чекбоксов, то имена у них должны быть разными.

Атрибут `checked` отмечает чексбокс галочкой по умолчанию. 
```html
<input type="checkbox" checked>
```

### Переключатель или «радиобаттон»
Переключатель создаётся с помощью тега `<input>` с типом `radio`. Обычно переключатели размещают группами по несколько штук. Причём у переключателей из одной группы должно быть **одинаковое имя и разные значения**, которые задаются c помощью `value`. Атрибут `value` является для переключателей обязательным. Браузер отправляет на сервер значение `value` выбранного переключателя.
```html
<input type="radio" name="color" value="black" checked>
<input type="radio" name="color" value="red">
```

### Раскрывающийся список или «селект»
Раскрывающийся список создаётся с помощью парного тега `<select>`. 

Варианты ответов задаются с помощью парных тегов `<option>`, которые должны располагаться внутри тега `<select>`.

Если при отправке формы у выбранного варианта задан `value`, то на сервер отправится значение этого атрибута. В противном случае будет отправлен **текст подписи**.
```html
<select name="theme">
  <option value="light">Светлая тема</option>
  <option value="dark">Тёмная тема</option>
  ...
</select>
```

Тег `<optgroup>` предназначен для объединения `<option>` в группы. Атрибут `label` этого тега определяет заголовок группы.
```html
<select name="variants">
  <optgroup label="Группа вариантов 1">
    <option value="1">Вариант 1</option>
    <option value="2">Вариант 2</option>
    <option value="3">Вариант 3</option>
  </optgroup>
  <optgroup label="Группа вариантов 2">
    <option value="4">Вариант 4</option>
    <option value="5">Вариант 5</option>
    <option value="6">Вариант 6</option>
  </optgroup>
</select>
```

Атрибут `multiple` - позволяет выбрать несколько вариантов списка. Выбрать несколько вариантов можно, щёлкая по ним с зажатой клавишей `Ctrl` на Windows или `Command` на MacOS. 

Атрибут `size` меняет высоту `<select>`, а атрибут `selected` отмечает по умолчанию определённые варианты списка.

При отправке данных мультиселекта на сервер с PHP после имени в значении атрибута `name` ставятся символы квадратных скобок `[]`. Например, `<select name="days[]">`. Это необязательное требование и нужно только для корректной обработки данных в PHP.
```html
<select name="theme" multiple size="2">
  <option value="light" selected>Светлая тема</option>
  <option value="dark">Тёмная тема</option>
  ...
</select>
```

### Загрузка файлов
Тег `<input>` с типом `file` - позволяет выбрать файл для загрузки. Для этого поля обязательным атрибутом является имя. Чтобы поле заработало и браузер смог передать выбранный файл на сервер, необходимо добавить форме атрибут `enctype` со значением `multipart/form-data`.
```html
<form action="https://echo.htmlacademy.ru" method="post" enctype="multipart/form-data">
  <p>Выберите изображение для своего аватара:</p>
  <input type="file" name="avatar">
  <input type="submit" value="Загрузить">
</form>
```

### Скрытое поле
Тег `<input>` с типом `hidden` - скрытое поле. Используется, когда в форме нужно отправить какие-то дополнительные служебные данные, которые не вводятся пользователем. Пример: *реквизиты заказа или номер пользователя в форме оплаты*.
```html
<input type="hidden" name="num_order" value="150931">
```

### Сброс введенных значений
Тег `<input>` с типом `reset` - сбрасывает введённые данные в поля формы и возвращает те, которые были установлены в полях формы по умолчанию.
```html
<input type="reset" value="Сбросить">
```

### Кнопка изображение
Тег `<input>` с типом `image`. Кнопка-изображение работает аналогично кнопке `submit`, но на сервер дополнительно передаются координаты точки, по которой был произведен щелчок.

Атрибут `src`	адрес изображения.

Атрибут `alt`	альтернативный текст, отображаемый в том случае, если изображение не загружено.
```html
<input type="image" src="enter.png" alt="Войти">
```

### Обязательные поля
Атрибут `required` - указывает, что поле обязательно для заполнения. При попытке отправить форму с незаполнеными обязательными полями браузер выведет всплывающее предупреждение.
```html
<input type="text" required>
```

### Поле выбора даты, и времени
Тип поля `date` позволяет выбрать дату. При клике на данное поле в форме всплывает календарик. Если браузер не поддерживает поле для ввода даты, то вместо него отображается обычное текстовое поле.
```html
<input type="date">
```
Тип поля `time` позволяет выбрать время.
```html
<input type="time">
```
Тип поля `datetime-local` позволяет выбрать дату с указанием времени (без учета временной зоны).

Тип поля `week` позволяет выбрать порядковый номер недели в году и года.

Тип поля `month` выбор месяца и года.

### Список возможных значений
Тег `<datalist>` определяет список возможных значений. Они отображаются, когда пользователь начинает вводить текст в поле.

Связывание текстового поля и списка осуществляется при помощи атрибута `list` у тега `<input>`. Значение `list` должно быть таким же, как значение атрибута `id` у списка. 

```html
<input type="text" list="browsers" name="browser">

<datalist id="browsers">
  <option value="Firefox"></option>
  <option value="Chrome"></option>
  <option value="Safari"></option>
</datalist>
```
Если тег `<input>` имеет специфический тип, например `email` или другие, то в списке отображаются только корректные для данного типа значения.

### Поле ввода числового значения
Тип поля `number` позволяет указать числовое значение. Рядом с полем браузер автоматически подставляет две стрелочки для увеличения и уменьшения числового значения.

При помощи вспомогательных атрибутов `min` и `max` можно установить верхнюю и нижнюю границу допустимых значений. А атрибут `step` устанавливает величину шага изменения значения. Поле ввода числа по-особому ведёт себя в мобильных браузерах, например, при фокусе на такое поле появляется клавиатура, позволяющая вводить соответствующие символы.
```html
<input id="amount" type="number" name="amount" min="5" max="50" step="5">
```

### Поле поиска
Тип поля `search` является полем для поиска. Это поле почти не отличается от обычного текстового поля. В некоторых браузерах внутри него появляется крестик для сброса введённого значения.
```html
<input id="catalog-search" type="search" name="search">
```

### Автофокус

Атрибут `autofocus` cообщает браузеру в какое поле установить курсор по умолчанию. **Такой атрибут должен быть только один на странице**.
```html
<input id="catalog-search" type="search" name="search" autofocus>
```

### Выбор из диапазона
Тип поля `range` позволяет выбрать число из некоторого интервала значений. Выглядит как шкала с ползунком.
```html
<input type="range" min="1" max="10" step="5">
```

### Область для вывода результата
Тег `<output>` представляет собой область, куда выводятся результаты вычислений, обычно полученные при помощи JavaScript. Значение по умолчанию при этом можно не задавать, тогда область вывода будет пустой.

```html
<form action="https://echo.htmlacademy.ru" method="post" oninput="daysoutput.value=dayscount.value">
  <input type="range" id="dayscount" name="dayscount" min="1" max="14" step="1">
  <output name="sum">[значение по умолчанию]</output>
</form>
```

### Группировка полей формы
Тег `<fieldset>` используется для группировки полей. По умолчанию браузеры отображают результат в виде рамки вокруг этой группы полей.

Тег `<legend>`  добавляет заголовок для группы полей.
```html
<fieldset>
  <legend>Заголовок группы</legend>
  <input type="text">
  <input type="text">
</fieldset>
<fieldset>
  <textarea></textarea>
</fieldset>
```

### Паттерны значений полей
Атрибут `pattern` добавляет автоматическую проверку формата номера с помощью регулярного выражения.
```html
<input type="text" name="passport" pattern="[0-9]{3}-[0-9]{5}" required>
```

### Поле ввода телефона, email, и url

Атрибут `tel` - используется для ввода номера телефона. 
```html
<input type="tel" id="phone" name="phone" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" required>
```
Атрибуты `email` и `url`, предназначенны для ввода электронной почты и адреса сайта. Особенностью этих полей является то, что они автоматически проверяют формат введённых данных.
```html
<input type="email">
<input type="url">
```

### Подсказка при заполнении полей
Атрибут `placeholder` - выводит текст подсказки поля. Выводится внутри текстового поля, а при вводе значения — автоматически убирается.
```html
<input type="text" placeholder="Текст подсказки">
```

### Поле выбора цвета
Тип поля `color` предназначен для выбора цвета. При клике на такое поле появляется окно с возможностью выбрать цвет из палитры. Если браузер не поддерживает поле для выбора цвета, то вместо него отображается обычное текстовое поле.
```html
<input type="color">
```

### Запрет редактирования полей
Атрибут `readonly` не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Введенное значение можно выделить и скопировать. Данные из этого поля отправляются на сервер.

Атрибут `disabled` не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Нельзя поставить фокус в это поле, введенное значение нельзя выделять и копировать. Данные из этого поля НЕ отправляются на сервер.
```html
<input type="text" readonly>
<input type="text" disabled>
```

### Управление автозаполнением полей
Атрибут `autocomplete` управляет параметрами автозаполнения.

Он может принимать два значения `on` и `off`. Первое включает автозаполнение, второе — отключает. Отключение автозаполнения обычно используется из соображений безопасности, например, чтобы не сохранялись пароли, номера банковских карт и так далее. Значение по умолчанию зависит от настроек браузера.
```html
<input type="text" autocomplete="off">
```

### Индикатор значения.
Тег `<meter>` используется для вывода значения в некотором известном диапазоне. Преимущественно для отображения числовых значений. Например: *количество результатов поиска, объем жидкости, давления и др.*  Визуально отображают значение в виде рисунка, на котором цветом помечается текущее значение в указанном диапазоне. Текст внутри тега отображается в случае если бразузер не поддерживает данный тег.
- Атрибут `value` устанавливает значение. Обязательный атрибут.
- Атрибут `min` задает минимально возможное значение.
- Атрибут `max` задает максимально возможное значение.
- Атрибут `low` определяет предел, при достижении которого значение считается низким.
- Атрибут `high` определяет предел, при достижении которого значение считается высоким.
- Атрибут `optimum` определяет наилучшее или оптимальное значение.
```html
<p>Температура воды</p>
<meter value="0" max="100" low="10" high="60">Низкая</meter>
<meter value="30" max="100" low="10" high="60">Нормальная</meter>
<meter value="80" max="100" low="10" high="60">Горячая</meter>
<meter value="100" max="100">Кипяток</meter>
```

### Прогресс завершённости задачи
Тег `<progress>` используется для отображения прогресса завершенности задачи. Изменение значения происходит через JavaScript. Атрибут `value` устанавливает текущее значение, а атрибут `max` предельное значение. Текст внутри тега отображается в случае если бразузер не поддерживает данный тег.
```html
<p>Пожалуйста подождите, операция выполняется.</p>
<progress value="25" max="100">Загружено на <span id="value">25</span>%</progress>
```

<a name="Multi"></a>
## Мультимедиа

### Аудио
Тег `<audio>` встраивает аудиоплеер на страницу. Атрибут `src` указывает на источник файла (путь должен быть относительным).
- Атрибут `controls` добавляет элементы управления плеером.
- Атрибут `volume` устанавливает громкость по умолчанию от `0.0` до `0.1`.
- Атрибут `autoplay` автоматически начинает проигрывать трек при загрузки страницы.
- Атрибут `loop` проигрывает трек снова и снова.
- Атрибут `muted` отключает звук по умолочанию.
- Атрибут `preload` предварительно загружает трек при загрузки страницы.
```html
<audio src="/assets/Hal.mp3" controls></audio>
```

### Видео
Тег `<video>` встраивает видеоплеер на страницу.
- Атрибут `controls` добавляет встроенные в браузер элементы управления видеоплеером.
- Атрибут `volume` устанавливает громкость по умолчанию от `0.0` до `0.1`.
- Атрибут `autoplay` автоматически начинает проигрывать видео при загрузки страницы.
- Атрибут `loop` проигрывает видео снова и снова.
- Атрибут `preload` предварительно загружает видео при загрузки страницы.
- Атрибут `poster` устанавливает превью видео.
- Атрибуты `width` и `height` устанавливают ширину и высоты видеоплеера.
```html
<video src="/assets/HTML 5 Video.mp4" controls></video>
```

### Субтитры
Тег `<track>` определяет текстовые дорожки *(субтитры)* для `<audio>` и `<video>` элементов. Такая дорожка обычно содержит субтитры на разных языках, комментарии, заголовки и др.
- Атрибут `kind` указывает [тип дорожки](http://htmlbook.ru/html/track).
- Атрибут `src` указывает путь к файлу с дорожкой.
- Атрибут `srclang` - язык дорожки. См. [коды языков](http://htmlbook.ru/html/value/lang).
- Атрибут `label` отображаемое название дорожки. Если этот атрибут не указан, браузер станет использовать значение, которое применяется у него по умолчанию, например «untitled1».
- Атрибут `default` указывает, что данная дорожка предпочтительна и должна быть выбрана по умолчанию. Только одна дорожка может иметь атрибут `default`.
```html
<video src="brave.webm">
  <track kind="subtitles" src="brave.en.vtt" srclang="en" label="English">
  <track kind="captions"  src="brave.en.hoh.vtt" srclang="en" label="English for the Hard of Hearing">
  <track kind="subtitles" src="brave.fr.vtt" srclang="fr" lang="fr" label="Français">
  <track kind="subtitles" src="brave.de.vtt" srclang="de" lang="de" label="Deutsch">
</video>
```

<a name="Interact"></a>
## Интерактивные элементы

### Аккордион
Теги `<details>` и `<summary>` создают аккордион с заголовком и описанием. Визуально оторбражается как заголовок со стрелочкой при нажатии на который расскрывается основное содержимое.
```html
<details>
  <summary>Я не успеваю сделать всё в срок, что делать?</summary>
  <p>На финальной лекции будут рассказывать, что делать тем, кто не успел защититься.</p>
</details>
```

### Модальное окно
Элемент `<dialog>` *(от англ. dialog)* создаёт диалоговое окно, в котором можно выводить контент. Плохо поддерживается браузерами.

### Карта
Тег `<map>` определяет интерактивную карту поверх изображения. Атрибут `<name>` определяет имя карты, которое атрибут `usemap` у изображения будет использовать в качестве значения.

Тег `<area>` определяет интерактивную область. 
- Атрибут `title` определяет заголовок области, 
- Атрибут `<shape>` определяет форму области,
- Атрибут `<coords>` определяет координаты, связанные с формой,
- Атрибут `<href>` задаёт ссылку.
```html
<img src="/images/world-continents.png" width="320" height="160" orgwidth="320" orgheight="160" usemap="#world-continents">
<map name="world-continents">
  <area title="Северная Америка" href="https://en.wikipedia.org/wiki/North_America" shape="poly" coords="48,89,67,69,77,49,140,0,68,0,6,10,4,31,16,69">
  <area title="Южная Америка" href="https://en.wikipedia.org/wiki/South_America" shape="poly" coords="48,88,61,74,119,99,95,160,66,159">
  <area title="Европа" href="https://en.wikipedia.org/wiki/Europe" shape="poly" coords="124,49,145,46,158,50,187,43,198,6,146,1,115,21">
  <area title="Африка" href="https://en.wikipedia.org/wiki/Africa" shape="poly" coords="121,53,140,47,169,51,186,77,196,80,188,137,156,136,138,97,118,86">
  <area title="Азия" href="https://en.wikipedia.org/wiki/Asia" shape="poly" coords="166,50,184,77,201,74,215,91,258,108,263,87,283,74,297,8,192,3,191,29,187,46,170,42">
  <area title="Австралия" href="https://en.wikipedia.org/wiki/Australia_(continent)" shape="poly" coords="257,107,263,85,314,89,316,137,294,151,249,132,248,114">
</map>
```

### No script
Тег `<noscript>` определяет содержимое, отображаемое, если в браузере не включен JavaScript . 
```html
<noscript>Пожалуйста включите JavaScript.</noscript>
```
